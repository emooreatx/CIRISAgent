name: Build and Deploy
# GitHub Container Registry permissions fixed in org settings

on:
  push:
    branches:
      - main
  pull_request:
    types: [opened, synchronize, reopened]

permissions:
  contents: read
  packages: write
  pull-requests: read

jobs:
  test:
    name: Test
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Essential for accurate SonarQube results

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.12'

      - name: Clean Python Cache and Test Artifacts
        run: |
          find . -type d -name __pycache__ -exec rm -rf {} + || true
          find . -type f -name "*.pyc" -delete || true
          find . -type f -name "*.pyo" -delete || true
          rm -rf .pytest_cache || true
          rm -f test_*.db || true
          rm -f ciris_engine.db || true
          rm -rf data/*.db || true

      - name: Install Dependencies
        run: |
          pip install --upgrade pip
          pip install typing_extensions>=4.0.0
          pip install -r requirements.txt
          pip install pytest pytest-cov

      - name: Run tests and coverage
        env:
          CI: true
        run: |
          pytest --cov=./ --cov-report=xml:coverage.xml

      - name: Display and write version
        env:
          CIRIS_BUILD_SIGN_KEY: ${{ secrets.CIRIS_BUILD_SIGN_KEY }}
        run: |
          python version.py
          cat BUILD_INFO.txt || echo "No BUILD_INFO.txt created"

      - name: Upload BUILD_INFO artifact
        uses: actions/upload-artifact@v4
        with:
          name: build-info
          path: BUILD_INFO.txt

      # SonarQube scan (only on main repo)
      - name: Check SonarQube conditions
        id: check_sonar
        run: |
          echo "Repository: ${{ github.repository }}"
          REPO_LOWER=$(echo "${{ github.repository }}" | tr '[:upper:]' '[:lower:]')
          if [[ "$REPO_LOWER" == "cirisai/cirisagent" ]] && [[ -n "${{ secrets.SONAR_TOKEN }}" ]]; then
            echo "should_run=true" >> $GITHUB_OUTPUT
          else
            echo "should_run=false" >> $GITHUB_OUTPUT
          fi

      - name: SonarQube Scan
        if: steps.check_sonar.outputs.should_run == 'true'
        uses: SonarSource/sonarqube-scan-action@v5
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}

  build:
    name: Build Docker Images
    needs: test
    runs-on: ubuntu-latest
    if: success()
    steps:
      - uses: actions/checkout@v4

      - name: Download BUILD_INFO artifact
        uses: actions/download-artifact@v4
        with:
          name: build-info
          path: .

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to GitHub Container Registry
        if: github.repository == 'CIRISAI/CIRISAgent' && (github.event_name != 'pull_request' || github.event.pull_request.head.repo.full_name == github.repository)
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ghcr.io/cirisai/ciris-agent
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=sha
            type=raw,value=latest,enable={{is_default_branch}}

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./docker/agent/Dockerfile
          push: ${{ github.repository == 'CIRISAI/CIRISAgent' && (github.event_name != 'pull_request' || github.event.pull_request.head.repo.full_name == github.repository) }}
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          platforms: linux/amd64

      - name: Build GUI Docker image
        uses: docker/build-push-action@v5
        with:
          context: ./CIRISGUI
          file: ./docker/gui/Dockerfile
          push: ${{ github.repository == 'CIRISAI/CIRISAgent' && (github.event_name != 'pull_request' || github.event.pull_request.head.repo.full_name == github.repository) }}
          tags: |
            ghcr.io/cirisai/ciris-gui:latest
            ghcr.io/cirisai/ciris-gui:${{ github.sha }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          platforms: linux/amd64


      - name: Build Summary
        if: always()
        run: |
          echo "## Build Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          if [[ "${{ github.repository }}" != "CIRISAI/CIRISAgent" ]]; then
            echo "✅ Built images locally (fork - no push)" >> $GITHUB_STEP_SUMMARY
          elif [[ "${{ github.event_name }}" == "pull_request" ]]; then
            if [[ "${{ github.event.pull_request.head.repo.full_name }}" != "${{ github.repository }}" ]]; then
              echo "✅ Built images locally (fork PR - no push)" >> $GITHUB_STEP_SUMMARY
            else
              echo "✅ Built and pushed images (same-repo PR)" >> $GITHUB_STEP_SUMMARY
            fi
          else
            echo "✅ Built and pushed images (branch push)" >> $GITHUB_STEP_SUMMARY
          fi
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Images:" >> $GITHUB_STEP_SUMMARY
          echo "- ciris-agent" >> $GITHUB_STEP_SUMMARY
          echo "- ciris-gui" >> $GITHUB_STEP_SUMMARY

  deploy:
    name: Notify CIRISManager of Update
    needs: build
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' && github.repository == 'CIRISAI/CIRISAgent'
    environment: production
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 1  # Just need the latest commit message

      - name: Notify CIRISManager
        run: |
          # Extract changelog and assess risk
          CHANGELOG=$(git log -1 --pretty=format:"%s")

          # Simple risk assessment based on commit message
          if echo "$CHANGELOG" | grep -qiE "breaking|major|critical|security"; then
            RISK_LEVEL="high"
          elif echo "$CHANGELOG" | grep -qiE "fix|patch|minor"; then
            RISK_LEVEL="low"
          else
            RISK_LEVEL="medium"
          fi

          # Extract version (use short SHA)
          VERSION="${{ github.sha }}"
          VERSION="${VERSION:0:7}"

          # Notify CIRISManager about new images with rich context
          # CIRISManager will orchestrate the deployment
          response=$(curl -s -w "\nHTTP_STATUS:%{http_code}" -X POST https://agents.ciris.ai/manager/v1/updates/notify \
            -H "Authorization: Bearer ${{ secrets.DEPLOY_TOKEN }}" \
            -H "Content-Type: application/json" \
            -d "{
              \"agent_image\": \"ghcr.io/cirisai/ciris-agent:latest\",
              \"gui_image\": \"ghcr.io/cirisai/ciris-gui:latest\",
              \"strategy\": \"canary\",
              \"source\": \"github-actions\",
              \"commit_sha\": \"${{ github.sha }}\",
              \"changelog\": \"$CHANGELOG\",
              \"risk_level\": \"$RISK_LEVEL\",
              \"version\": \"$VERSION\"
            }")

          # Extract HTTP status
          http_status=$(echo "$response" | grep "HTTP_STATUS:" | cut -d: -f2)
          body=$(echo "$response" | sed '/HTTP_STATUS:/d')

          echo "Response body: $body"
          echo "HTTP status: $http_status"

          # Check if successful (2xx status code)
          if [[ "$http_status" =~ ^2[0-9][0-9]$ ]]; then
            echo "✅ Successfully notified CIRISManager"
            echo "Deployment ID: $(echo "$body" | jq -r '.deployment_id // "unknown"')"
            echo "Strategy: $(echo "$body" | jq -r '.strategy // "unknown"')"
          else
            echo "❌ Failed to notify CIRISManager"
            echo "HTTP Status: $http_status"
            echo "Response: $body"
            exit 1
          fi

      - name: Monitor Deployment Status
        run: |
          # Give CIRISManager time to process
          sleep 10

          # Check deployment status
          echo "Checking deployment status..."
          status_response=$(curl -s -w "\nHTTP_STATUS:%{http_code}" https://agents.ciris.ai/manager/v1/updates/status \
            -H "Authorization: Bearer ${{ secrets.DEPLOY_TOKEN }}")

          status_http=$(echo "$status_response" | grep "HTTP_STATUS:" | cut -d: -f2)
          status_body=$(echo "$status_response" | sed '/HTTP_STATUS:/d')

          if [[ "$status_http" =~ ^2[0-9][0-9]$ ]]; then
            echo "Deployment Status:"
            echo "$status_body" | jq '.'
          else
            echo "Could not retrieve deployment status"
          fi

          echo ""
          echo "CIRISManager will handle the deployment orchestration."
          echo "Agents will be notified based on the canary deployment strategy."

  deploy-gui:
    name: Deploy GUI Container
    needs: build
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' && github.repository == 'CIRISAI/CIRISAgent'
    environment: production
    steps:
      - name: Deploy GUI Container
        uses: appleboy/ssh-action@v1.0.0
        with:
          host: 108.61.119.117
          username: root
          key: ${{ secrets.DEPLOY_SSH_KEY }}
          script: |
            cd /home/ciris/CIRISAgent

            # Pull latest GUI image
            echo "Pulling latest GUI image..."
            docker pull ghcr.io/cirisai/ciris-gui:latest

            # Update GUI container (no agent negotiation needed - just infrastructure)
            echo "Updating GUI container..."
            docker-compose -f deployment/docker-compose.dev-prod.yml up -d ciris-gui

            # Verify GUI is running
            docker ps | grep ciris-gui

            echo "GUI deployment complete!"
