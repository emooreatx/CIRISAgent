name: Build and Deploy
# GitHub Container Registry permissions fixed in org settings

on:
  push:
    branches:
      - main
  pull_request:
    types: [opened, synchronize, reopened]

permissions:
  contents: read
  packages: write
  pull-requests: read

jobs:
  test:
    name: Test
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Essential for accurate SonarQube results
      
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.12'

      - name: Clean Python Cache and Test Artifacts
        run: |
          find . -type d -name __pycache__ -exec rm -rf {} + || true
          find . -type f -name "*.pyc" -delete || true
          find . -type f -name "*.pyo" -delete || true
          rm -rf .pytest_cache || true
          rm -f test_*.db || true
          rm -f ciris_engine.db || true
          rm -rf data/*.db || true

      - name: Install Dependencies
        run: |
          pip install --upgrade pip
          pip install typing_extensions>=4.0.0
          pip install -r requirements.txt
          pip install pytest pytest-cov

      - name: Run tests and coverage
        env:
          CI: true
        run: |
          pytest --cov=./ --cov-report=xml:coverage.xml

      - name: Display and write version
        env:
          CIRIS_BUILD_SIGN_KEY: ${{ secrets.CIRIS_BUILD_SIGN_KEY }}
        run: |
          python version.py
          cat BUILD_INFO.txt || echo "No BUILD_INFO.txt created"

      # SonarQube scan (only on main repo)
      - name: Check SonarQube conditions
        id: check_sonar
        run: |
          echo "Repository: ${{ github.repository }}"
          REPO_LOWER=$(echo "${{ github.repository }}" | tr '[:upper:]' '[:lower:]')
          if [[ "$REPO_LOWER" == "cirisai/cirisagent" ]] && [[ -n "${{ secrets.SONAR_TOKEN }}" ]]; then
            echo "should_run=true" >> $GITHUB_OUTPUT
          else
            echo "should_run=false" >> $GITHUB_OUTPUT
          fi

      - name: SonarQube Scan
        if: steps.check_sonar.outputs.should_run == 'true'
        uses: SonarSource/sonarqube-scan-action@v5
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}

  build:
    name: Build Docker Images
    needs: test
    runs-on: ubuntu-latest
    if: success()
    steps:
      - uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to GitHub Container Registry
        if: github.repository == 'CIRISAI/CIRISAgent' && (github.event_name != 'pull_request' || github.event.pull_request.head.repo.full_name == github.repository)
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ghcr.io/cirisai/ciris-agent
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=sha
            type=raw,value=latest,enable={{is_default_branch}}

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./docker/agent/Dockerfile
          push: ${{ github.repository == 'CIRISAI/CIRISAgent' && (github.event_name != 'pull_request' || github.event.pull_request.head.repo.full_name == github.repository) }}
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          platforms: linux/amd64

      - name: Build GUI Docker image
        uses: docker/build-push-action@v5
        with:
          context: ./CIRISGUI
          file: ./docker/gui/Dockerfile
          push: ${{ github.repository == 'CIRISAI/CIRISAgent' && (github.event_name != 'pull_request' || github.event.pull_request.head.repo.full_name == github.repository) }}
          tags: |
            ghcr.io/cirisai/ciris-gui:latest
            ghcr.io/cirisai/ciris-gui:${{ github.sha }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          platforms: linux/amd64

      - name: Build Nginx Docker image
        uses: docker/build-push-action@v5
        with:
          context: ./deployment/nginx
          file: ./deployment/nginx/Dockerfile
          push: ${{ github.repository == 'CIRISAI/CIRISAgent' && (github.event_name != 'pull_request' || github.event.pull_request.head.repo.full_name == github.repository) }}
          tags: |
            ghcr.io/cirisai/ciris-nginx:latest
            ghcr.io/cirisai/ciris-nginx:${{ github.sha }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          platforms: linux/amd64
          build-args: |
            NGINX_CONFIG=agents.ciris.ai-dev.conf

      - name: Build Summary
        if: always()
        run: |
          echo "## Build Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          if [[ "${{ github.repository }}" != "CIRISAI/CIRISAgent" ]]; then
            echo "✅ Built images locally (fork - no push)" >> $GITHUB_STEP_SUMMARY
          elif [[ "${{ github.event_name }}" == "pull_request" ]]; then
            if [[ "${{ github.event.pull_request.head.repo.full_name }}" != "${{ github.repository }}" ]]; then
              echo "✅ Built images locally (fork PR - no push)" >> $GITHUB_STEP_SUMMARY
            else
              echo "✅ Built and pushed images (same-repo PR)" >> $GITHUB_STEP_SUMMARY
            fi
          else
            echo "✅ Built and pushed images (branch push)" >> $GITHUB_STEP_SUMMARY
          fi
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Images:" >> $GITHUB_STEP_SUMMARY
          echo "- ciris-agent" >> $GITHUB_STEP_SUMMARY
          echo "- ciris-gui" >> $GITHUB_STEP_SUMMARY
          echo "- ciris-nginx" >> $GITHUB_STEP_SUMMARY

  deploy:
    name: Deploy to Production
    needs: build
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' && github.repository == 'CIRISai/CIRISAgent'
    environment: production
    steps:
      - name: Deploy via SSH
        uses: appleboy/ssh-action@v1.0.0
        with:
          host: 108.61.119.117
          username: root
          key: ${{ secrets.DEPLOY_SSH_KEY }}
          script: |
            # Initialize server if needed (idempotent)
            if [ ! -f "/home/ciris/.initialized" ]; then
              echo "First time deployment - initializing server..."
              
              # Update system
              apt-get update
              apt-get upgrade -y
              
              # Install required packages
              apt-get install -y curl git ca-certificates gnupg lsb-release ufw
              
              # Install Docker if needed
              if ! command -v docker &> /dev/null; then
                curl -fsSL https://get.docker.com | sh
                systemctl enable docker
                systemctl start docker
              fi
              
              # Install or update Docker Compose if needed
              if ! command -v docker-compose &> /dev/null || ! docker-compose version | grep -q "v2"; then
                echo "Installing/updating Docker Compose to v2.20.0..."
                curl -L "https://github.com/docker/compose/releases/download/v2.20.0/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
                chmod +x /usr/local/bin/docker-compose
              fi
              
              # Create ciris user if needed
              if ! id -u ciris &>/dev/null; then
                useradd -m -s /bin/bash ciris
                usermod -aG docker ciris
              fi
              
              # Setup directory structure
              mkdir -p /home/ciris
              chown ciris:ciris /home/ciris
              
              # Configure firewall
              ufw allow 22/tcp    # SSH
              ufw allow 80/tcp    # HTTP
              ufw allow 443/tcp   # HTTPS
              ufw allow 3000/tcp  # GUI
              ufw allow 8080/tcp  # API
              ufw --force enable
              
              # Mark as initialized
              touch /home/ciris/.initialized
            fi
            
            # Ensure base directories exist
            mkdir -p /home/ciris
            cd /home/ciris
            
            # Clone or update repository
            if [ ! -d "CIRISAgent" ]; then
              git clone https://github.com/CIRISAI/CIRISAgent.git
            fi
            cd CIRISAgent
            git pull origin main
            
            # Setup Python virtual environment for CIRISManager
            if [ ! -d "/home/ciris/venv" ]; then
              echo "Creating Python virtual environment for CIRISManager..."
              python3 -m venv /home/ciris/venv
            fi
            
            # Update pip and install requirements
            echo "Installing/updating Python dependencies..."
            /home/ciris/venv/bin/pip install --upgrade pip
            /home/ciris/venv/bin/pip install -r requirements.txt
            
            # Create .env.datum file for Phase 1 if it doesn't exist
            if [ ! -f ".env.datum" ]; then
              echo "# Phase 1 Mock LLM Environment" > .env.datum
              echo "CIRIS_MOCK_LLM=true" >> .env.datum
              echo "# Discord credentials should be added manually if needed" >> .env.datum
              echo "# DISCORD_BOT_TOKEN=your_token_here" >> .env.datum
            fi
            
            # Create shared OAuth directory and copy existing config if available
            mkdir -p /home/ciris/shared/oauth
            if [ -f "/home/ciris/.ciris/oauth.json" ]; then
              echo "Copying existing OAuth configuration to shared volume..."
              cp /home/ciris/.ciris/oauth.json /home/ciris/shared/oauth/
            fi
            
            # Stop the standalone nginx service if running
            if systemctl is-active --quiet nginx; then
              echo "Stopping standalone nginx service..."
              systemctl stop nginx
              systemctl disable nginx || true
            fi
            
            # Use the production dev compose file that expects images
            if [ ! -f "deployment/docker-compose.dev-prod.yml" ]; then
              cp deployment/docker-compose.dev.yml deployment/docker-compose.dev-prod.yml
            fi
            
            # Pull new images from GitHub Container Registry
            docker pull ghcr.io/cirisai/ciris-agent:latest
            docker pull ghcr.io/cirisai/ciris-gui:latest
            docker pull ghcr.io/cirisai/ciris-nginx:latest
            
            # Tag images for local use
            docker tag ghcr.io/cirisai/ciris-agent:latest ciris-agent:latest
            docker tag ghcr.io/cirisai/ciris-gui:latest ciris-gui:latest
            docker tag ghcr.io/cirisai/ciris-nginx:latest ciris-nginx:latest
            
            # Fix volume permissions before deployment
            echo "Ensuring proper volume permissions..."
            # The CIRIS container runs as user 'ciris' (uid 1000)
            for volume in datum_data datum_logs; do
              VOLUME_PATH=$(docker volume inspect deployment_${volume} 2>/dev/null | jq -r '.[0].Mountpoint' || echo "")
              if [ -n "$VOLUME_PATH" ] && [ -d "$VOLUME_PATH" ]; then
                echo "Setting permissions for $volume at $VOLUME_PATH"
                # Set ownership to uid 1000 (ciris user in container)
                chown -R 1000:1000 "$VOLUME_PATH" || true
                # Set secure permissions: owner can read/write/execute, group can read/execute, others nothing
                chmod -R 750 "$VOLUME_PATH"
              fi
            done
            
            # Use clean deployment with CIRIS Manager
            if [ -f "deployment/deploy-clean.sh" ]; then
              echo "Using clean deployment with CIRIS Manager..."
              chmod +x deployment/deploy-clean.sh
              ./deployment/deploy-clean.sh
            else
              # Fallback to simple docker-compose
              echo "Using simple deployment..."
              docker-compose -f deployment/docker-compose.dev-prod.yml pull
              docker-compose -f deployment/docker-compose.dev-prod.yml up -d
            fi
            
            # Clean up old images
            docker image prune -f
            
            # Install CIRISManager if not already installed
            if ! command -v ciris-manager &> /dev/null; then
              echo "Installing CIRISManager..."
              cd /home/ciris/CIRISAgent
              apt-get install -y python3-pip python3-venv
              # Install using setup_manager.py
              python3 setup_manager.py install --user
              # Add local bin to PATH
              export PATH="/root/.local/bin:$PATH"
            fi
            
            # Create CIRISManager config if it doesn't exist
            if [ ! -f "/etc/ciris-manager/config.yml" ]; then
              mkdir -p /etc/ciris-manager
              /root/.local/bin/ciris-manager --generate-config --config /etc/ciris-manager/config.yml
              # Update compose file path and disable pull_images
              sed -i 's|/home/ciris/CIRISAgent/deployment/docker-compose.yml|/home/ciris/CIRISAgent/deployment/docker-compose.dev-prod.yml|' /etc/ciris-manager/config.yml
              sed -i 's/pull_images: true/pull_images: false/' /etc/ciris-manager/config.yml
            fi
            
            # Install CIRISManager API service (API-only, no container management)
            if [ ! -f "/etc/systemd/system/ciris-manager-api.service" ]; then
              cp deployment/ciris-manager-api.service /etc/systemd/system/
              systemctl daemon-reload
              systemctl enable ciris-manager-api
              systemctl start ciris-manager-api
            else
              # Restart if already exists to pick up any changes
              systemctl restart ciris-manager-api
            fi
            
            # No need to copy nginx config - it's mounted via docker-compose volume
            
            # Create systemd service for auto-start if it doesn't exist
            if [ ! -f "/etc/systemd/system/ciris-dev.service" ]; then
              cat > /etc/systemd/system/ciris-dev.service << 'EOF'
            [Unit]
            Description=CIRIS Development Deployment
            After=docker.service
            Requires=docker.service
            
            [Service]
            Type=oneshot
            RemainAfterExit=yes
            WorkingDirectory=/home/ciris/CIRISAgent
            ExecStart=/usr/local/bin/docker-compose -f deployment/docker-compose.dev-prod.yml up -d
            ExecStop=/usr/local/bin/docker-compose -f deployment/docker-compose.dev-prod.yml down
            User=root
            Group=root
            
            [Install]
            WantedBy=multi-user.target
            EOF
              systemctl daemon-reload
              systemctl enable ciris-dev
            fi

      - name: Verify deployment
        uses: appleboy/ssh-action@v1.0.0
        with:
          host: 108.61.119.117
          username: root
          key: ${{ secrets.DEPLOY_SSH_KEY }}
          script: |
            # Wait for containers to be healthy
            echo "Waiting for containers to start..."
            
            # Poll for up to 5 minutes
            MAX_WAIT=300  # 5 minutes
            WAIT_INTERVAL=30  # Check every 30 seconds
            ELAPSED=0
            
            while [ $ELAPSED -lt $MAX_WAIT ]; do
              echo "Checking API health (attempt $(($ELAPSED / $WAIT_INTERVAL + 1)))..."
              
              if curl -f http://localhost:8080/v1/system/health 2>/dev/null; then
                echo "\nAPI is healthy!"
                break
              fi
              
              echo "API not ready yet, waiting ${WAIT_INTERVAL}s... (${ELAPSED}s elapsed)"
              sleep $WAIT_INTERVAL
              ELAPSED=$(($ELAPSED + $WAIT_INTERVAL))
            done
            
            # Final check
            if [ $ELAPSED -ge $MAX_WAIT ]; then
              echo "API health check failed after ${MAX_WAIT} seconds!"
              echo "\nContainer logs:"
              docker logs ciris-agent-datum --tail 100
              exit 1
            fi
            
            # Verify containers are running
            echo "\nRunning containers:"
            docker ps | grep ciris
            
            # Reload nginx to pick up any config changes
            echo "\nReloading nginx configuration..."
            docker exec ciris-nginx nginx -s reload && echo "Nginx configuration reloaded"
            
            # Check CIRISManager API
            echo "\nChecking CIRISManager API..."
            if curl -f http://localhost:8888/manager/v1/health 2>/dev/null; then
              echo "CIRISManager API is healthy!"
              
              # List discovered agents
              echo "\nDiscovered agents:"
              curl -s http://localhost:8888/manager/v1/agents | jq -r '.[] | "- \(.agent_name) (\(.agent_id)): \(.status) - \(.health // "unknown")"' || echo "Failed to parse agents"
            else
              echo "Warning: CIRISManager API not responding (this is non-critical)"
            fi
            
            echo "\nDeployment successful! Phase 1 with Mock LLM is running."